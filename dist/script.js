(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function Article(title, author, published, content) {
  var article = Tag.create("div", {
    "class": "Article"
  }, [Tag.create("h1", {
    "class": "Article__Title"
  }, [title]), Tag.create("div", {
    "class": "Article__Metadata"
  }, [Tag.create("span", {
    "class": "Article__Author"
  }, [author]), Tag.create("span", {
    "class": "Article__Published"
  }, [published])]), Tag.create("p", {
    "class": "Article__Content"
  }, [content])]);
  return article;
}

module.exports = Article;

},{"../toolkit":11}],2:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function CategoriesList(articles) {
  // Récupérer les données pertinantes
  var categories = new Set();

  for (var a in articles) {
    categories.add(articles[a].category);
  } // Génerer le tableau de LI


  var itemList = [];
  categories.forEach(function (elm) {
    itemList.push(Tag.create("li", {}, [elm]));
  }); // Créer le composant HTML

  var categoriesList = Tag.create("div", {
    "class": "Categories"
  }, [Tag.create("p", {}, ["Liste des catégories"]), Tag.create("ul", {}, itemList)]);
  return categoriesList;
}

module.exports = CategoriesList;

},{"../toolkit":11}],3:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function Counter(articles) {
  var counter = Tag.create("div", {
    "class": "Counter"
  }, [Tag.create("span", {}, ["Nombre d'articles : "]), Tag.create("span", {}, [articles.length])]);
  return counter;
}

module.exports = Counter;

},{"../toolkit":11}],4:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit'); //Component footer


function Footer(logo, menu, socialNetwork) {
  var footer = Tag.create("footer", {
    "class": "footer"
  }, [Tag.create("div", {
    "class": "logo"
  }, [logo]), Tag.create("div", {
    "class": "menu"
  }, [menu]), Tag.create("div", {
    "class": "socialNetwork"
  }, [socialNetwork])]);
  return footer;
}

module.exports = Footer;

},{"../toolkit":11}],5:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function Formulaire(action, method) {
  var formulaire = Tag.create("div", {
    "class": "Formulaire"
  }, [Tag.create("form", {
    "class": "Form",
    action: action,
    method: method
  }, [Tag.create("input", {
    "class": "Form_Title",
    "type": "text",
    "name": "title",
    "value": "title"
  }), Tag.create("input", {
    "class": "Form_Author",
    "type": "text",
    "name": "author",
    "value": "author"
  }), Tag.create("input", {
    "class": "Form_Published",
    "type": "text",
    "name": "published",
    "value": "20/02/2021"
  }), Tag.create("input", {
    "class": "Form_Category",
    "type": "text",
    "name": "category",
    "value": "category"
  }), Tag.create("input", {
    "class": "Form_Content",
    "type": "text",
    "name": "content",
    "value": "content"
  }), Tag.create("input", {
    "class": "Form_Submit",
    "type": "submit"
  })])]);
  action.responseType = 'json';
  return formulaire;
}

module.exports = Formulaire;

},{"../toolkit":11}],6:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function Header(logo, menu) {
  var header = Tag.create("header", {
    "class": "header"
  }, [Tag.create("div", {
    "class": "logo"
  }, [logo]), Tag.create("div", {
    "class": "menu"
  }, [menu])]);
  return header;
}

module.exports = Header;

},{"../toolkit":11}],7:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function Logo(url, alt) {
  var logo = Tag.create("img", {
    "src": url,
    "alt": alt
  }, []);
  return logo;
}

module.exports = Logo;

},{"../toolkit":11}],8:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function NavList(dataNav) {
  // Génerer le tableau de LI
  var menuList = [];

  for (var elm in dataNav) {
    menuList.push(Tag.create("li", {}, [Tag.create("a", {
      'href': dataNav[elm]
    }, [elm])]));
  }

  ; // Créer le composant HTML

  var navList = Tag.create("nav", {
    "class": "NavBar"
  }, [Tag.create("ul", {}, menuList)]);
  return navList;
}

module.exports = NavList;

},{"../toolkit":11}],9:[function(require,module,exports){
"use strict";

var Tag = require('../toolkit');

function SocialList(dataSocial) {
  // Génerer le tableau de LI
  var socialList = [];

  for (var elm in dataSocial) {
    socialList.push(Tag.create("li", {}, [Tag.create("a", {
      'href': dataSocial[elm]
    }, [elm])]));
  }

  ; // Créer le composant HTML

  var listSocial = Tag.create("nav", {
    "class": "SocialBar"
  }, [Tag.create("ul", {}, socialList)]);
  return listSocial;
}

module.exports = SocialList;

},{"../toolkit":11}],10:[function(require,module,exports){
"use strict";

var Tag = require('./toolkit');

var Article = require('./components/Article');

var Header = require('./components/Header');

var Footer = require('./components/Footer');

var Formulaire = require('./components/Formulaire');

var CategoriesList = require('./components/CategoriesList');

var Counter = require('./components/Counter');

var Logo = require('./components/Logo');

var NavList = require('./components/NavList');

var SocialList = require('./components/SocialList'); // ##########################
// # Code de l'application
// ##########################
//GÉNÉRATION HEADER


Tag.append(Header(Logo('https://picsum.photos/80', 'Logo aléatoire'), NavList({
  "Accueil": "/accueil",
  "Articles": "/articles",
  "À propos de nous": "/apropos"
})), Tag.get('header')[0]); //GÉNÉRATION ARTICLES

fetch(new Request("http://188.165.104.163:8080/articles")).then(function (res) {
  return res.json();
}).then(function (articles) {
  Tag.append(CategoriesList(articles), Tag.get('main')[0]);
  Tag.append(Counter(articles), Tag.get('main')[0]);

  for (var a in articles) {
    Tag.append(Article(articles[a].title, articles[a].author, articles[a].published, articles[a].content), Tag.get('main')[0]);
  }
}); //GÉNÉRATION FOOTER

Tag.append(Footer(Logo('https://picsum.photos/80', 'Logo aléatoire'), NavList({
  "Accueil": "/accueil",
  "Articles": "/articles",
  "À propos de nous": "/apropos"
}), SocialList({
  "facebook": "www.facebook.fr",
  "Twitter": "www.twitter.com",
  "Instagram": "www.instagram.com"
})), Tag.get('footer')[0]);
Tag.append(Formulaire("http://188.165.104.163:8080/publish", "POST"), Tag.ROOT);

},{"./components/Article":1,"./components/CategoriesList":2,"./components/Counter":3,"./components/Footer":4,"./components/Formulaire":5,"./components/Header":6,"./components/Logo":7,"./components/NavList":8,"./components/SocialList":9,"./toolkit":11}],11:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// EcmaScript 
// Dépendent du contexte d'exécution
// Tous les navigateurs n'ont pas la même version de JS
// deux modes d'accès aux propriétés d'un objet : 
// 	* objet   : obj.property 
// 	* tableau : obj["property"] 
// for...in 
// typeof 
// createElement, appendChild, setAttributes
// functions anonymes : function() { ... }
// ##########################
// # UI Toolkit
// ##########################
var Tag = {}; //Tag.ROOT = ROOT est un attribut de Tag

Tag.ROOT = document.body; //Tag.create = déclaration fonction anonyme qu'on désanonymise : elle devient une méthode de Tag
//function(param){instructions} <= fonction anonyme
//la fonction anonyme peut être mise dans une variable, tranformée en méthode d'objet...

Tag.create = function (type) {
  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  // Crée l'élément HTML 
  var tag = document.createElement(type); // Assigne des attributs

  for (var key in attributes) {
    tag.setAttribute(key, attributes[key]);
  } // Assigne des éléments HTML enfants


  for (var key in children) {
    var child;

    if (_typeof(children[key]) === "object") {
      child = children[key];
    } else {
      child = document.createElement("span");
      child.innerText = children[key].toString();
    }

    tag.appendChild(child);
  } // Retourne l'élément HTML


  return tag;
};

Tag.append = function (tag, parentNode) {
  parentNode.appendChild(tag);
};

Tag.get = function (selector) {
  var list = []; // selector = id ?

  var idElm = document.getElementById(selector);
  if (idElm !== null) list.push(idElm); // selector = class ?

  var classElm = document.getElementsByClassName(selector);

  for (var i = 0; i < classElm.length; i++) {
    list.push(classElm[i]);
  } // selector = tag ?


  var tagElm = document.getElementsByTagName(selector);

  for (var i = 0; i < tagElm.length; i++) {
    list.push(tagElm[i]);
  }

  return list;
};

module.exports = Tag;

},{}]},{},[10])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
